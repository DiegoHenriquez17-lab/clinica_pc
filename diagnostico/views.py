# diagnostico/views.py
from django.shortcuts import render, redirect
from django.contrib import messages
from django.utils import timezone
from login_app.decorators import login_required_simulado
from recepcion.views import equipos_registrados  # usamos los equipos registrados en Recepci√≥n

# Datos en memoria (sin BD)
asignaciones = []      # equipos asignados a estudiantes para diagn√≥stico
diagnosticos = []      # diagn√≥sticos realizados (se usa en Entrega y Dashboard)

# Lista de estudiantes disponibles (puedes unificarla si ya la mantienes en otra app)
estudiantes = [
    "IVY ANAYA PRADINES GUZM√ÅN",
    "MIGUEL ANGEL BARRIA MANSILLA",
    "DIEGO EDUARDO HENRIQUEZ GONZ√ÅLEZ",
    "DANILO ISMAEL CARRILLO MAYORGA",
    "ARMANDO BENJAM√çN VARGAS MOHR",
    "JAVIER EDUARDO ROJAS SALGADO",
    "TOM√ÅS ANDR√âS VERA CO√ëUECAR",
    "ROBINSON PATRICIO ORLANDO BARRIENTOS REYES",
    "MATIAS ALEJANDRO NONQUE RUIZ",
    "GABRIEL VICENTE RUIZ SCHWARZENBERG",
    "CRISTAL ESTEFAN√çA MANZANI RIVERA",
    "JOAQU√çN MANUEL CUADRA MORALES",
    "ANTONIO BENEDETTI MORALES",
    "BENJAM√çN IGNACIO TORRES P√âREZ",
    "JAVIER ANDR√âS CALBUANTE GONZ√ÅLEZ",
    "JAVIER ORLANDO C√ÅRDENAS TORRES",
    "BASTI√ÅN FRANCISCO MONTECINOS C√ÅCERES",
    "NICOLAS SEBASTIAN S√ÅEZ G√ìMEZ",
    "ANASTASIA JASM√çN SILVA SOTO",
]


@login_required_simulado
def asignar(request):
    """
    Asignar un equipo registrado a un estudiante para que luego sea diagnosticado.
    GET: muestra selector de estudiante + lista de equipos (con √≠ndice).
    POST: guarda la asignaci√≥n y redirige a evaluar.
    """
    if request.method == "POST":
        estudiante = request.POST.get("estudiante")
        equipo_id = request.POST.get("equipo")

        # Validaciones b√°sicas
        if not estudiante:
            messages.error(request, "Debes seleccionar un estudiante.")
            return redirect("diagnostico:asignar")

        if not equipo_id or not equipo_id.isdigit():
            messages.error(request, "Debes seleccionar un equipo v√°lido.")
            return redirect("diagnostico:asignar")

        equipo_idx = int(equipo_id)

        if equipo_idx < 0 or equipo_idx >= len(equipos_registrados):
            messages.error(request, "√çndice de equipo fuera de rango.")
            return redirect("diagnostico:asignar")

        equipo = equipos_registrados[equipo_idx]
        asignaciones.append({"estudiante": estudiante, "equipo": equipo})

        messages.success(
            request,
            f"Equipo '{equipo.get('tipo_equipo', 'Equipo')}' de {equipo.get('nombre')} "
            f"asignado a {estudiante}."
        )
        return redirect("diagnostico:evaluar")

    # GET: pasamos los equipos disponibles con su √≠ndice para el <select>
    equipos_opciones = list(enumerate(equipos_registrados))
    return render(request, "diagnostico/asignar.html", {
        "estudiantes": estudiantes,
        "equipos": equipos_opciones
    })


@login_required_simulado
def evaluar(request):
    """
    Registrar diagn√≥stico de un equipo ya asignado.
    GET: muestra formulario.
    POST: guarda diagn√≥stico.
    """
    if request.method == "POST":
        estudiante = request.POST.get("estudiante")
        equipo_desc = request.POST.get("equipo")
        diagnostico_txt = request.POST.get("diagnostico")
        solucion = request.POST.get("solucion")
        tipo_solucion = request.POST.get("tipo_solucion")

        # Validaciones
        if not (estudiante and equipo_desc and diagnostico_txt and solucion and tipo_solucion):
            messages.error(request, "Debes completar todos los campos.")
            return redirect("diagnostico:evaluar")

        now = timezone.localtime()

        # ‚úÖ Reemplazar diagn√≥stico previo del mismo estudiante (si existe)
        diagnosticos[:] = [d for d in diagnosticos if d.get("estudiante") != estudiante]

        diagnosticos.append({
            "estudiante": estudiante,
            "equipo": equipo_desc,
            "diagnostico": diagnostico_txt,
            "solucion": solucion,
            "tipo_solucion": tipo_solucion,
            "created_ts": now.timestamp(),
            "created_at": now.strftime("%d/%m/%Y %H:%M"),
        })

        messages.success(request, f"Diagn√≥stico de {equipo_desc} registrado con √©xito.")
        return redirect("diagnostico:listado")

    # üîπ Construir listas √∫nicas
    estudiantes_unicos = sorted({a["estudiante"] for a in asignaciones})
    equipos_unicos = sorted({f"{a['equipo']['tipo_equipo']} ‚Äî {a['equipo']['nombre']}" for a in asignaciones})

    return render(request, "diagnostico/evaluar.html", {
        "estudiantes": estudiantes_unicos,
        "equipos": equipos_unicos,
    })


@login_required_simulado
def listado(request):
    """
    Listado de diagn√≥sticos realizados.
    """
    return render(request, "diagnostico/listado.html", {
        "diagnosticos": diagnosticos
    })
